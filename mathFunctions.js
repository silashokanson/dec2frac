export function decimalToFraction(n){let t="-"===(n=n.replace(/[^0-9\.\-]/g,""))[0]?BigInt(-1):BigInt(1);"-"===n[0]&&(n=n.slice(1));let[r,o]=n.includes(".")?n.split("."):[n,"0"],e=BigInt(o);o=o.replace(/[^0-9]/g,"");let i=BigInt(10)**BigInt(o.length);return"0"!==r&&(e+=BigInt(r)*i),[e*=t,i]}export function continuedFraction(n,t){let r=[];for(;t!==BigInt(0);){let o=n/t;r.push(o),[n,t]=[t,n%t]}return r}export function continuedFractionToFraction(n,t){let r=BigInt(1),o=n[t-1];for(let e=t-2;e>=0;e--)[r,o]=[o,n[e]*o+r];return[o,r]}function divRoundClosest(n,t){return n<BigInt(0)==t<BigInt(0)?(n+t/BigInt(2))/t:(n-t/BigInt(2))/t}function roundFraction(n,t,r,o){return divRoundClosest(n*o,t)===r}function binarySearchCf(n,t,r){let o=BigInt(1),e=BigInt(n.length);for(;o<e;){let i=(o+e)/BigInt(2),[c,u]=continuedFractionToFraction(n,Number(i)),l=c*(r/u),a=u*(r/u);roundFraction(l,a,t,r)?e=i:o=i+BigInt(1)}return o}export function simplifyFraction(n){let[t,r]=decimalToFraction(n),o=continuedFraction(t,r),e=binarySearchCf(o,t,r);return continuedFractionToFraction(o,Number(e))}export function dec2frac(n){n[0];let[t,r]=n.includes(".")?n.split("."):[n,""],[o,e]=simplifyFraction(n);return[o/e,o%e,e]}